// This source file is part of SwiftMocks open source project.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright © 2019-2020, Sergiy Drapiko
// Copyright © 2020, SwiftMocks project contributors

import Foundation

%{
with open("OpaqueMetadata+Builtins+Extensions.swift.gyb.input") or sys.exit(-1) as f:
    builtins = [line.rstrip() for line in f]
}%

public extension OpaqueMetadata.Builtin {
    enum Kind: Hashable {
% for builtin in builtins:
%   (symbol, name) = builtin.split(":")
        case ${name}
% end
    }
}

public extension OpaqueMetadata.Builtin {
% for builtin in builtins:
%   (symbol, name) = builtin.split(":")
    static var ${name}: OpaqueMetadata = {
        guard let p: RawPointer = dlsym(dlopen(nil, 0), "${symbol[1:]}") else { fatalError("Symbol ${symbol[1:]} not found") }
        return Metadata.from(p + MemoryLayout<TypeMetadataHeader.Pointee>.size) as! OpaqueMetadata
    }()
% end
}


internal let cachedOpaqueMetadata: [OpaqueMetadata: OpaqueMetadata.Builtin.Kind] = {
    var result = [OpaqueMetadata: OpaqueMetadata.Builtin.Kind]()
% for builtin in builtins:
%   (symbol, name) = builtin.split(":")
    result[OpaqueMetadata.Builtin.${name}] = OpaqueMetadata.Builtin.Kind.${name}
% end
    return result
}()
