func getStandardTypeSubst(typeName: String) -> UnicodeScalar? {
if (typeName == "AutoreleasingUnsafeMutablePointer") { return "A" }
if (typeName == "Array") { return "a" }
if (typeName == "Bool") { return "b" }
if (typeName == "UnicodeScalar") { return "c" }
if (typeName == "Dictionary") { return "D" }
if (typeName == "Double") { return "d" }
if (typeName == "Float") { return "f" }
if (typeName == "Set") { return "h" }
if (typeName == "DefaultIndices") { return "I" }
if (typeName == "Int") { return "i" }
if (typeName == "Character") { return "J" }
if (typeName == "ClosedRange") { return "N" }
if (typeName == "Range") { return "n" }
if (typeName == "ObjectIdentifier") { return "O" }
if (typeName == "UnsafePointer") { return "P" }
if (typeName == "UnsafeMutablePointer") { return "p" }
if (typeName == "UnsafeBufferPointer") { return "R" }
if (typeName == "UnsafeMutableBufferPointer") { return "r" }
if (typeName == "String") { return "S" }
if (typeName == "Substring") { return "s" }
if (typeName == "UInt") { return "u" }
if (typeName == "UnsafeRawPointer") { return "V" }
if (typeName == "UnsafeMutableRawPointer") { return "v" }
if (typeName == "UnsafeRawBufferPointer") { return "W" }
if (typeName == "UnsafeMutableRawBufferPointer") { return "w" }
if (typeName == "Optional") { return "q" }
if (typeName == "BinaryFloatingPoint") { return "B" }
if (typeName == "Encodable") { return "E" }
if (typeName == "Decodable") { return "e" }
if (typeName == "FloatingPoint") { return "F" }
if (typeName == "RandomNumberGenerator") { return "G" }
if (typeName == "Hashable") { return "H" }
if (typeName == "Numeric") { return "j" }
if (typeName == "BidirectionalCollection") { return "K" }
if (typeName == "RandomAccessCollection") { return "k" }
if (typeName == "Comparable") { return "L" }
if (typeName == "Collection") { return "l" }
if (typeName == "MutableCollection") { return "M" }
if (typeName == "RangeReplaceableCollection") { return "m" }
if (typeName == "Equatable") { return "Q" }
if (typeName == "Sequence") { return "T" }
if (typeName == "IteratorProtocol") { return "t" }
if (typeName == "UnsignedInteger") { return "U" }
if (typeName == "RangeExpression") { return "X" }
if (typeName == "Strideable") { return "x" }
if (typeName == "RawRepresentable") { return "Y" }
if (typeName == "StringProtocol") { return "y" }
if (typeName == "SignedInteger") { return "Z" }
if (typeName == "BinaryInteger") { return "z" }
  fatalError("Unknown typename")
}
